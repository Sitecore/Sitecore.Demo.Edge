# Build Sitecoredemo Docker images
trigger:
  branches:
    include:
    - develop

resources:
- repo: self
  clean: true

variables:
  GitVersion.SemVer: ''
  SITECORE_VERSION: '10.1.0'
  GitVersion.PreReleaseLabel: ''
  tag: '$(GitVersion.SemVer)'
  additionalImageTags: ''

stages:
- stage: Docker_Windows
  displayName: "Build Windows Images"
  jobs:
  - job: Build_Headless
    timeoutInMinutes: 120
    strategy:
      matrix:
        windows2004:
          poolName: 'docker-2004-agents'
          osVersion: '2004'
        ltsc2019:
          poolName: 'docker-ltsc2019-agents'
          osVersion: 'ltsc2019'
        20H2:
          poolName: 'docker-20H2-agents'
          osVersion: '20H2'
    displayName: 'Build Windows Docker Images'
    pool:
      name: $(poolName)
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
        installationPath: 'c:/program files/dotnet'
        performMultiLevelLookup: true
    - template: version.yml
    - task: PowerShell@2
      displayName: "Build and Push Images"
      inputs:
        targetType: 'inline'
        script: |
          $sitecoreRegistry = "$(sitecore.container.registry)"

          if ("$sitecoreRegistry" -ne "scr.sitecore.com/"){
            az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"
            az acr login -n "$(sitecore.container.registry.short)"
          }

          az acr login -n $(container.registry.short)

          $params = @{}
          $params.Add("DemoVersion", "$(tag)")
          $params.Add("DemoTeamRegistry","$(REGISTRY)")
          $params.Add("SitecoreRegistry","$sitecoreRegistry")
          $params.Add("IsolationMode","process")
          $params.Add("WindowsVersion","$(osVersion)")
          $params.Add("SitecoreVersion","$(SITECORE_VERSION)")

          ./init-ci.ps1 @params

          # Reset demo version to correct tag without build id
          $env:DEMO_VERSION = "$(tag)"

          docker-compose build solution $(no.cache)
          docker-compose build --parallel $(no.cache)
          docker-compose push

          $primaryBuild = $(if ([string]::IsNullOrEmpty("$(additionalImageTags)")) { $false } else { $true })
          if ($primaryBuild) {
            $env:DEMO_VERSION = "$(additionalImageTags)"
            docker-compose build solution $(no.cache)
            docker-compose build --parallel
            docker-compose push
          }

- stage: Docker_Linux
  displayName: "Build Linux Images"
  dependsOn: []
  jobs:
    - job: Build_Linux_Images
      displayName: "Build Linux Images"
      pool:
        name: docker-linux-agents
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: "sdk"
            version: "3.1.x"
        - template: version.yml     
        - task: DockerCompose@0
          displayName: "Docker Compose Build"
          inputs:
            containerregistrytype: "Azure Container Registry"
            azureSubscription: "$(azure.subscription)"
            azureContainerRegistry: "$(container.registry)"
            dockerComposeFile: "docker-compose-linux.yml"
            dockerComposeFileArgs: |
              DEMO_VERSION=$(tag)
              REGISTRY=$(REGISTRY)
              SITECORE_VERSION=$(SITECORE_VERSION)
              SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
              SITECORE_LICENSE=$(SITECORE_LICENSE)
            qualifyImageNames: false
            action: "Build services"
            additionalImageTags: "$(SITECORE_VERSION)-linux-$(additionalImageTags)"
            arguments: "$(no.cache)"
            currentWorkingDirectory: "$(Build.SourcesDirectory)"
        - task: DockerCompose@0
          displayName: "Push Images"
          inputs:
            containerregistrytype: "Azure Container Registry"
            azureSubscription: $(azure.subscription)
            azureContainerRegistry: $(container.registry)
            dockerComposeFile: "docker-compose-linux.yml"
            dockerComposeFileArgs: |
              REGISTRY=$(REGISTRY)
              DEMO_VERSION=$(tag)
              SITECORE_VERSION=$(SITECORE_VERSION)
              SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
            action: "Push services"
            additionalImageTags: "$(SITECORE_VERSION)-linux-$(additionalImageTags)"
            currentWorkingDirectory: "$(Build.SourcesDirectory)"

- stage: Release_Notes
  displayName: "Create Release Notes"
  dependsOn:
    - Docker_Windows
    - Docker_Linux
  condition: and(succeeded('Docker_Windows'), succeeded('Docker_Linux'),or( eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
  jobs:
    - job: Generate_Release_Notes
      pool:
        vmImage: "windows-latest"
      displayName: "Generate Release Notes"
      steps:
        - template: version.yml
        - task: XplatGenerateReleaseNotes@3
          inputs:
            outputfile: "$(Build.ArtifactStagingDirectory)/releasenotes-edge-xm0-$(GitVersion.SemVer).md"
            templateLocation: "File"
            templatefile: "release-notes-template.hb"
            dumpPayloadToConsole: true
            dumpPayloadToFile: false
            replaceFile: true
            appendToFile: false
            getParentsAndChildren: False
            sortWi: true
            checkStage: false
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "$(Build.ArtifactStagingDirectory)/releasenotes-edge-xm0-$(GitVersion.SemVer).md"
            artifact: "Release Notes"
            publishLocation: "pipeline"
        - task: AzureCLI@2
          displayName: "Upload release notes"
          inputs:
            azureSubscription: "$(azure.subscription)"
            scriptType: "pscore"
            scriptLocation: "inlineScript"
            inlineScript: "az storage file upload --account-name dockerassets  --share-name release-notes --source $(Build.ArtifactStagingDirectory)/releasenotes-edge-xm0-$(GitVersion.SemVer).md"

- stage: Update_Portal_Databases_Nightly
  displayName: "Update 'nightly' version in portal databases"
  dependsOn:
    - Release_Notes
  condition: and(succeeded('Docker_Windows'), succeeded('Docker_Linux'),eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
    - job: Update_Tags
      displayName: "Update Tags"
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: "sdk"
            version: "3.1.x"
            installationPath: "c:/program files/dotnet"
            performMultiLevelLookup: true
        - template: version.yml
        - task: PowerShell@2
          inputs:
            targetType: "inline"
            script: |
              Invoke-RestMethod -Uri "$(DEV_PORTAL)/api/UpdateDefinition?demoType=edge-xm0&sitecoreVersion=$(SITECORE_VERSION)&channel=nightly" -Method POST -Body "{ apiKey: '$(DEV_PORTAL_API_KEY)', tag: '$(GitVersion.SemVer)' }" -ContentType "application/json"
              Invoke-RestMethod -Uri "$(PROD_PORTAL)/api/UpdateDefinition?demoType=edge-xm0&sitecoreVersion=$(SITECORE_VERSION)&channel=nightly" -Method POST -Body "{ apiKey: '$(PROD_PORTAL_API_KEY)', tag: '$(GitVersion.SemVer)' }" -ContentType "application/json"

- stage: Update_DEV_Portal_Databases_Stable
  displayName: "Update 'stable' version in the DEV portal database"
  dependsOn:
    - Release_Notes
  condition: and(succeeded('Docker_Windows'), succeeded('Docker_Linux'),eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
    - job: Update_Dev_Database
      displayName: "Update Dev Database"
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: "sdk"
            version: "3.1.x"
            installationPath: "c:/program files/dotnet"
            performMultiLevelLookup: true
        - template: version.yml
        - task: PowerShell@2
          inputs:
            targetType: "inline"
            script: |
              Invoke-RestMethod -Uri "$(DEV_PORTAL)/api/UpdateDefinition?demoType=edge-xm0&sitecoreVersion=$(SITECORE_VERSION)&channel=stable" -Method POST -Body "{ apiKey: '$(DEV_PORTAL_API_KEY)', tag: '$(GitVersion.SemVer)' }" -ContentType "application/json"

- stage: Update_PROD_Portal_Database_Stable
  displayName: "Update 'stable' version in the PROD portal database"
  dependsOn:
    - Release_Notes
  condition: and(succeeded('Docker_Windows'), succeeded('Docker_Linux'),eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
    - job: Update_Production_Database
      displayName: "Update Production Database"
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: "sdk"
            version: "3.1.x"
            installationPath: "c:/program files/dotnet"
            performMultiLevelLookup: true
        - template: version.yml
        - task: PowerShell@2
          inputs:
            targetType: "inline"
            script: |
              Invoke-RestMethod -Uri "$(PROD_PORTAL)/api/UpdateDefinition?demoType=edge-xm0&sitecoreVersion=$(SITECORE_VERSION)&channel=stable" -Method POST -Body "{ apiKey: '$(PROD_PORTAL_API_KEY)', tag: '$(GitVersion.SemVer)' }" -ContentType "application/json"
    - deployment: Update_Production_Database_Deployment
      displayName: "Update Production Database Deployment"
      environment: Production Portal Database
